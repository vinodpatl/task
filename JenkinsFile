pipeline {
    agent any
environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials-id' // Jenkins Docker credentials ID
        DOCKER_IMAGE = 'your-dockerhub-username/nodejs-app'
        DOCKER_TAG = 'latest'
        NODE_VERSION = '22.9.0
    }
    
stages {
        stage('Checkout Code') {
            steps {
                
                git Branch:main  git 'https://github.com/vinodpatl/task.git/'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build Project') {
            steps {
                
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
              
                sh 'npm test'
            }
        }
 stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image for the Node.js application
                    sh 'docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using Jenkins credentials
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS_ID}") {
                        // Push the Docker image to Docker Hub
                        sh 'docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    // Optional: Deploy the Docker container (for example, to a cloud service or Docker Swarm)
                    sh """
                    docker run -d -p 3000:3000 ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }
    }

stage('Package Artifacts') {
            steps {
                // Archive built files such as CSS and JavaScript assets
                archiveArtifacts artifacts: 'dist/**/*', allowEmptyArchive: true
            }
        }
    }

    post {
        success {
            echo 'Build completed successfully.'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
